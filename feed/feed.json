{
  "version": "https://jsonfeed.org/version/1",
  "title": "Solid Quant",
  "home_page_url": "https://solidquant.github.io",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "A quant hobbyist&#39;s soul search",
  "author": {
    "name": "Solid Quant",
    "url": "https://solidquant.github.io"
  },
  "items": [{
      "id": "https://solidquant.github.io/blog/post/building-a-defi-arbitrage-path-finder-(1)/",
      "url": "https://solidquant.github.io/blog/post/building-a-defi-arbitrage-path-finder-(1)/",
      "title": "Building a DeFi arbitrage path finder (1)",
      "content_html": "<p>¬†</p>\n<h4 id=\"starting-out\" tabindex=\"-1\">Starting out</h4>\n<p><img src=\"https://img.freepik.com/premium-vector/abstract-colour-wave-dots-black-background-3d-big-data-network-connection-technology-background_691453-136.jpg\" alt=\"Flashbots\"></p>\n<p>I‚Äôve been working on my DEX arbitrage bot for about a week now.\nAs a result, I did manage to pull off my first few trades with a 5% success ratio - a very disappointing rate for most traders.\nBut I only needed to check if this strategy had any potential.\nAnd if it did show any promise, I was going to give it the time it deserved and pursue it further.</p>\n<p>The first bot I built was a proof of concept bot that simply used quotes to recognize price spreads across multiple pools on Arbitrum Uniswap V3, and placed multihop swap orders accordingly.</p>\n<p>The execution layer wasn‚Äôt as difficult as it seemed at first, because there were numerous examples out there showing us exactly how we can send out order transactions onto the blockchain.</p>\n<p>The below Github repos are among such examples:</p>\n<ul>\n<li><a href=\"https://github.com/mouseless-eth/rusty-sando\">Rusty Sando</a></li>\n<li><a href=\"https://github.com/paradigmxyz/artemis/tree/main/crates/strategies/opensea-sudo-arb\">Artemis: Paradigmxyz‚Äôs Opensea/Sudoswap arbitrage bot</a></li>\n<li><a href=\"https://github.com/BowTiedDevil/degenbot\">Degenbot: Uniswap V2/V3 arbitrage bot</a></li>\n<li><a href=\"https://github.com/libevm/subway\">Subway: Uniswap V2 sandwich MEV bot written in TX</a></li>\n</ul>\n<p>The harder part was in understanding the atomicity of blockchain transactions, and why to ensure this I needed to use smart contracts to perform arbitrage strategies.</p>\n<p>When I first grasped the concept of flashloans, it was eye opening, because there was no equivalent in legacy finance. But as revolutionizing as the tech is, I needed to learn to deploy smart contracts to ensure transaction atomicity. So I put this on hold for a while and moved on to another important aspect of arbitrage strategies - which I would like to talk about in this blog post today.</p>\n<p>¬†</p>\n<h4 id=\"arbitrage-opportunity-searching\" tabindex=\"-1\">Arbitrage opportunity searching</h4>\n<p>The more difficult part of DEX arbitrage, for me, was in <strong>opportunity searching</strong>.</p>\n<p>This, in my opinion, is the more important aspect of building profitable bots, but isn‚Äôt touched on that much.\nBuilding an execution engine will take a couple of days tops to study and also to build - but if <strong>‚Äúsearching‚Äù</strong> isn‚Äôt done right, finding\nprofitable paths will take an infinite amount of time.</p>\n<p>When you are attempting arbitrage trades on one DEX with a couple of liquidity abundant tokens like WETH, USDC, USDT, the 3-way pairs you can create are quite limited. So you can simply hardcode the 3-way paths and retrieve price quotes to update the profitability of each path.</p>\n<p>The difficult part comes when you are attempting a 4-way, 5-way, n-way path swaps in multiple different DEXs. On top of this, try adding lending, derivatives, or options trading in DeFi to the equation, your path finding will become impossible to do by hand - or even with a program.</p>\n<p>So, before I began developing my execution engine any further, I decided to build a simple system that finds n-way arbitrage paths using multiple DEXs. This was to:</p>\n<ol>\n<li>figure out if simple DEX arbitrage strategies were still profitable,</li>\n<li>and if they weren‚Äôt anymore, under what conditions price spreads widened,</li>\n<li>and to build a prototype simulation engine written in vectors to speed up my arbitrage path finding.</li>\n</ol>\n<p>This project is still a work in progress, but I did release my scripts on Github to keep track of my work. Here‚Äôs the link to the repo:</p>\n<p><a href=\"https://github.com/solidquant/defi_path_finder\">üëâ DeFi Path Finder Repo</a></p>\n<p>¬†</p>\n<h4 id=\"how-to-use-path-finder\" tabindex=\"-1\">How to use Path Finder</h4>\n<p>The project structure is pretty simple as it retrieves data from Subgraphs and bulk loads information about Uniswap fork pools.</p>\n<p>First, clone the Github repo:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/solidquant/defi_path_finder/tree/main</code></pre>\n<p>Then, open up <em><a href=\"http://examples.py\">examples.py</a></em>, where you will find the example code of using <strong>defi_path_finder</strong>.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> defi_path_finder <span class=\"token keyword\">import</span> Preprocessor<br><span class=\"token keyword\">from</span> defi_path_finder <span class=\"token keyword\">import</span> make_triangular_paths<br><br><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span><br>    p <span class=\"token operator\">=</span> Preprocessor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    pools<span class=\"token punctuation\">,</span> reserves <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>load_data<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><br>    pairs<span class=\"token punctuation\">,</span> paths <span class=\"token operator\">=</span> make_triangular_paths<span class=\"token punctuation\">(</span>pools<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The above code is everything that this project does.</p>\n<p>You create a <strong>Preprocessor</strong> instance that collects subgraph data using the <strong>Collector</strong> instance. (<a href=\"https://github.com/solidquant/defi_path_finder/blob/main/defi_path_finder/preprocessor.py\">preprocessor.py</a>)</p>\n<p>The important function here is the <em>load_data(self, pool_cnt: int = 500)</em> method call:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pool_cnt<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># 1. Collect raw indexed data</span><br>    sushi <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>polygon_sushiswap_v2_pools<span class=\"token punctuation\">(</span>pool_cnt<span class=\"token punctuation\">)</span><br>    mesh <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>polygon_meshswap_v2_pools<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\"># 2. Create a numpy array by mapping token, exchange data to integers</span><br>    _arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><br><br>    <span class=\"token keyword\">for</span> pools_df <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>sushi<span class=\"token punctuation\">,</span> mesh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><br>        pools <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pools_df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><br>        pools<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pools_df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'token0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'token1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'exchange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>values<br>        _arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pools<span class=\"token punctuation\">)</span><br><br>    pools_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span>_arr<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\"># 3. Create a numpy array containing reserves data for all existing pools</span><br>    reserves_array <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><br>        <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TOKENS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>TOKENS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>EXCHANGES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token number\">2</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">for</span> pools_df <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>sushi<span class=\"token punctuation\">,</span> mesh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> pools_df<span class=\"token punctuation\">.</span>iterrows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            t0 <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'token0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>            t1 <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'token1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>            e <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'exchange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>            r0 <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'reserve0'</span><span class=\"token punctuation\">]</span><br>            r1 <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token string\">'reserve1'</span><span class=\"token punctuation\">]</span><br><br>            reserves_array<span class=\"token punctuation\">[</span>t0<span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>r0<span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">]</span><br><br>    <span class=\"token keyword\">return</span> pools_array<span class=\"token punctuation\">,</span> reserves_array</code></pre>\n<p>As seen from the code, it retrieves Sushiswap V2 pools data and Meshswap pools data.</p>\n<p>It then creates a <strong>pools_array</strong> numpy array that looks like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>,   <span class=\"token number\">1</span>,   <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span>  <span class=\"token number\">2</span>,   <span class=\"token number\">3</span>,   <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span>  <span class=\"token number\">4</span>,   <span class=\"token number\">1</span>,   <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">..</span>.,<br>       <span class=\"token punctuation\">[</span>  <span class=\"token number\">2</span>, <span class=\"token number\">449</span>,   <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span> <span class=\"token number\">10</span>, <span class=\"token number\">450</span>,   <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">413</span>, <span class=\"token number\">451</span>,   <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This is a mappings of <strong>(token0, token1, exchange)</strong> from both the exchanges.</p>\n<p>The first column represents: token0. The other two are: token1, exchange.</p>\n<p>So basically, the first row of <strong>pools_array</strong> will be: pool where token0 is 0, token1 is 1, and the exchange is 0. This maps to: USDC-KLIMA pool in Sushiswap V2 at 0x5786b267d35f9d011c4750e0b0ba584e1fdbead1</p>\n<p>Also, check a debug breakpoint somewhere within that function and try out the below commands:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> self.TOKENS<br><span class=\"token punctuation\">{</span><span class=\"token string\">'0x2791bca1f2de4661ed88a30c99a7a9449aa84174'</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">'symbol'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'USDC'</span>, <span class=\"token string\">'decimals'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">}</span>,<br><span class=\"token string\">'0x4e78011ce80ee02d2c3e649fb657e45898257815'</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">'symbol'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'KLIMA'</span>, <span class=\"token string\">'decimals'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">}</span>,<br><span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">}</span><br><br><span class=\"token operator\">>></span> self.EXCHANGES<br><span class=\"token punctuation\">{</span><span class=\"token string\">'sushiswap_v2'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">'meshswap'</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><br><br><span class=\"token operator\">>></span> self.POOLS<span class=\"token punctuation\">[</span><span class=\"token string\">'0_1_0'</span><span class=\"token punctuation\">]</span><br><span class=\"token string\">'0x5786b267d35f9d011c4750e0b0ba584e1fdbead1'</span></code></pre>\n<p>You can go check this out at: <a href=\"https://polygonscan.com/address/0x5786b267d35f9d011c4750e0b0ba584e1fdbead1#code\">https://polygonscan.com/address/0x5786b267d35f9d011c4750e0b0ba584e1fdbead1#code</a></p>\n<hr>\n<p>¬†</p>\n<p>Now that I have a mapper of all the pools in both the exchanges, what you want to do is call <strong>make_triangular_paths()</strong> function in <em><a href=\"http://utils.py\">utils.py</a></em>. (<a href=\"https://github.com/solidquant/defi_path_finder/blob/main/defi_path_finder/utils.py\">utils.py</a>)</p>\n<p>This function will run in 2 steps.</p>\n<ol>\n<li><strong>make_3_pairs</strong>,</li>\n<li><strong>make_paths_array</strong>.</li>\n</ol>\n<p>We will look at what each of these functions do.</p>\n<h5 id=\"1.-make_3_pairs\" tabindex=\"-1\">1. make_3_pairs</h5>\n<p>This function will create a combination of trangular pairs for all the tokens that you are tracking. This means that, for example, if you had tokens: <strong>WETH, WMATIC, WBTC, USDC, USDT</strong>, you should be able to make pairs that look like:</p>\n<ul>\n<li>WETH, WMATIC, WBTC</li>\n<li>WETH, WMATIC, USDC</li>\n<li>WETH, WMATIC, USDT</li>\n<li>WMATIC, WBTC, USDC</li>\n<li>WMATIC, WBTC, USDT</li>\n<li>‚Ä¶</li>\n</ul>\n<p>so on and so forth.</p>\n<p>This can be easily done with Python as below:</p>\n<pre class=\"language-python\"><code class=\"language-python\">  tokens <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"data\" is the \"pools_array\" from above</span><br>  combinations_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>combinations<span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Try debuggin these values:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> tokens<br>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>  <span class=\"token number\">0</span>,   <span class=\"token number\">1</span>,   <span class=\"token number\">2</span>,   <span class=\"token number\">3</span>,   <span class=\"token number\">4</span>,   <span class=\"token number\">5</span>,   <span class=\"token number\">6</span>,   <span class=\"token number\">7</span>,   <span class=\"token number\">8</span>,   <span class=\"token number\">9</span>,  <span class=\"token number\">10</span>,  <span class=\"token number\">11</span>,  <span class=\"token number\">12</span>,<br>        <span class=\"token number\">13</span>,  <span class=\"token number\">14</span>,  <span class=\"token number\">15</span>,  <span class=\"token number\">16</span>,  <span class=\"token number\">17</span>,  <span class=\"token number\">18</span>,  <span class=\"token number\">19</span>,  <span class=\"token number\">20</span>,  <span class=\"token number\">21</span>,  <span class=\"token number\">22</span>,  <span class=\"token number\">23</span>,  <span class=\"token number\">24</span>,  <span class=\"token number\">25</span>,<br>        <span class=\"token number\">26</span>,  <span class=\"token number\">27</span>,  <span class=\"token number\">28</span>,  <span class=\"token number\">29</span>,  <span class=\"token number\">30</span>,  <span class=\"token number\">31</span>,  <span class=\"token number\">32</span>,  <span class=\"token number\">33</span>,  <span class=\"token number\">34</span>,  <span class=\"token number\">35</span>,  <span class=\"token number\">36</span>,  <span class=\"token number\">37</span>,  <span class=\"token number\">38</span>,<br>        <span class=\"token number\">39</span>,  <span class=\"token number\">40</span>,  <span class=\"token number\">41</span>,  <span class=\"token number\">42</span>,  <span class=\"token number\">43</span>,  <span class=\"token number\">44</span>,  <span class=\"token number\">45</span>,  <span class=\"token number\">46</span>,  <span class=\"token number\">47</span>,  <span class=\"token number\">48</span>,  <span class=\"token number\">49</span>,  <span class=\"token number\">50</span>,  <span class=\"token number\">51</span>,<br>        <span class=\"token number\">52</span>,  <span class=\"token number\">53</span>,  <span class=\"token number\">54</span>,  <span class=\"token number\">55</span>,  <span class=\"token number\">56</span>,  <span class=\"token number\">57</span>,  <span class=\"token number\">58</span>,  <span class=\"token number\">59</span>,  <span class=\"token number\">60</span>,  <span class=\"token number\">61</span>,  <span class=\"token number\">62</span>,  <span class=\"token number\">63</span>,  <span class=\"token number\">64</span>,<br>        <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br><span class=\"token operator\">>></span> combinations_list<br><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">]</span></code></pre>\n<p><strong>combinations_list</strong> has all the possible 3-token combinations we can use to perform triangular arbitrage.</p>\n<p>The next step is to run <strong>_make_3_pairs_process</strong> function to get <strong>pairs</strong> data that looks like the below:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> pairs.keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>dict_keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>, <span class=\"token number\">398</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\"># the array here has information on: token0, token1, exchange, token_in, token_out</span><br><span class=\"token operator\">>></span> pairs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">395</span>, <span class=\"token number\">396</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">397</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">397</span>, <span class=\"token number\">396</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">397</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">395</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">396</span>, <span class=\"token number\">395</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">397</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">396</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">397</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">397</span>, <span class=\"token number\">395</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br><span class=\"token operator\">>></span> pairs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">2</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">2</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">0</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">0</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Let‚Äôs take a look at <em>pairs[(0, 1, 2)]</em>. As you can see, you only need to look at the upper half of the array for unique pools information. The first 4 pools are:</p>\n<ul>\n<li>0, 1, 0</li>\n<li>2, 0, 0</li>\n<li>2, 1, 0</li>\n<li>2, 0, 1</li>\n</ul>\n<p>pools from both exchanges 0 and 1. The latter two columns represent <strong>token_in, token_out</strong>. The additional columns are added to simplify the process of path building in the next step.</p>\n<p>This function call will be run in parallel, because if you run it using one process, it will take an hour to finish. But using 6 processes will let you finish in 10 minutes. Also, the complexity of this process is directly related to how many combinations there are. So when you are doing 4-way, 5-way, n-way path findings, the time you have to input will grow exponentially.</p>\n<p>The current method will work fine for triangular examples but will need improvements for other more complicated tasks.</p>\n<h5 id=\"2.-make_paths_array\" tabindex=\"-1\">2. make_paths_array</h5>\n<p>Now comes the most important part. Whereas the above function took a really long time to run, this process luckily takes a split second to finish.</p>\n<p>Upon running:</p>\n<pre class=\"language-python\"><code class=\"language-python\">paths <span class=\"token operator\">=</span> make_paths_array<span class=\"token punctuation\">(</span>pairs<span class=\"token punctuation\">)</span></code></pre>\n<p>You will get an output like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> paths<br>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">395</span>, <span class=\"token number\">396</span><span class=\"token punctuation\">]</span>,<br>        <span class=\"token punctuation\">[</span><span class=\"token number\">397</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">396</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">]</span>,<br>        <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">397</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">397</span>, <span class=\"token number\">395</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,<br><br>       <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">397</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">395</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">]</span>,<br>        <span class=\"token punctuation\">[</span><span class=\"token number\">397</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">397</span>, <span class=\"token number\">396</span><span class=\"token punctuation\">]</span>,<br>        <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">396</span>, <span class=\"token number\">395</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,<br><br>        <span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This is the 3-way path you are searching for. A close up would tell us more:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> paths<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">395</span>, <span class=\"token number\">396</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">397</span>, <span class=\"token number\">396</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">396</span>, <span class=\"token number\">397</span><span class=\"token punctuation\">]</span>,<br>       <span class=\"token punctuation\">[</span><span class=\"token number\">395</span>, <span class=\"token number\">397</span>,   <span class=\"token number\">1</span>, <span class=\"token number\">397</span>, <span class=\"token number\">395</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Let‚Äôs look at the last 2 columns - which are <strong>token_in, token_out</strong>.</p>\n<p>This swap path is as follows:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">swap <span class=\"token number\">395</span> to <span class=\"token number\">396</span><br>       swap <span class=\"token number\">396</span> to <span class=\"token number\">397</span><br>              swap <span class=\"token number\">397</span> to <span class=\"token number\">395</span></code></pre>\n<p>You can also get the pool address by:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span> p.POOLS<span class=\"token punctuation\">[</span><span class=\"token string\">'395_396_1'</span><span class=\"token punctuation\">]</span><br><span class=\"token string\">'0x2bab2b10e423491c12c449d99ad8aaed5c46fe4a'</span><br><br><span class=\"token operator\">>></span> p.POOLS<span class=\"token punctuation\">[</span><span class=\"token string\">'397_396_1'</span><span class=\"token punctuation\">]</span><br><span class=\"token string\">'0x35456fd93f9e95fb059da27a18d6cc1266a1b3fb'</span><br><br><span class=\"token operator\">>></span> p.POOLS<span class=\"token punctuation\">[</span><span class=\"token string\">'395_397_1'</span><span class=\"token punctuation\">]</span><br><span class=\"token string\">'0x3ee2a6db97f493f0221bb285f15e3021cdcaeccd'</span></code></pre>\n<p>¬†</p>\n<h4 id=\"what-to-do-next%3F\" tabindex=\"-1\">What to do next?</h4>\n<p>Finding a 3-way path was straightforward. But the more difficult part is in:</p>\n<ul>\n<li>simulating the swap paths,</li>\n<li>extending the framework to work on n-way paths</li>\n</ul>\n<p>In the next post, I would like to create a simple swap path simulation engine that accounts for market price impact.</p>\n",
      "date_published": "2023-06-16T00:00:00Z"
    },{
      "id": "https://solidquant.github.io/blog/post/i-decided-to-build-my-own-mev-bot.-here&amp;#39;s-how-i&amp;#39;m-going-to-do-it./",
      "url": "https://solidquant.github.io/blog/post/i-decided-to-build-my-own-mev-bot.-here&amp;#39;s-how-i&amp;#39;m-going-to-do-it./",
      "title": "I decided to build my own MEV bot. Here&#39;s how I&#39;m going to do it.",
      "content_html": "<p>¬†</p>\n<h4 id=\"starting-point\" tabindex=\"-1\">Starting point</h4>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*RaERN75kQoEANhdXTWEyMg.png\" alt=\"Flashbots\"></p>\n<p>¬†</p>\n<p>I only recently found out about the realm of MEVs despite having traded in the crypto space for some time already. My work mainly revolved around trading in spots and futures markets in CeFi, so I never really bothered to look into DeFi that much.</p>\n<p>But one of my clients wanted to build an automated trading bot using Uniswap V3. And I thought: <em>‚ÄòOh, what the heck. How hard can it be?‚Äô</em>, and just took on the project.</p>\n<p>Oh boy, was I in for a bumpy ride üßóüèº.</p>\n<p>Though I briefly knew what an AMM was, I never really grasped the math behind it. So I scanned through documentations and public resources I could find on Google. It took me like a week to really get a picture of what DEXs were trying to do. And it took another couple of days to build a JS bot that monitored Uniswap V3 pool prices and sent swapping transactions upon predefined events.</p>\n<p>After the project was over, I was intrigued by DeFi and wanted to further pursue this path, but then was met with this giant called <strong>MEV</strong>.</p>\n<p>Instead of just giving up, I decided to tackle the problem head on and face the giant. I would learn everything about MEV bots and just create one for myself. Then I‚Äôll be able to overcome the fear, and maybe even successfully find my own alpha.</p>\n<p>But the most important reason for this venture is to understand the cutting edge technologies behind blockchain ecosystems. I hated how I feared leaving my safety zone and considering blockchains and DeFi‚Äôs as black boxes. I knew if I put the time in, I would be able to understand the concepts with confidence.</p>\n<p><strong>So I am documenting the whole process here to give other starting fellows an idea of how much input you are going to need to put into building MEV bots.</strong></p>\n<p>Below, I am sharing the complete road map to learning MEV bot building. Since I am just a beginner in this space, I decided to build a bot from the ground up and gauge the time it would take someone to build such a program with no prior knowledge of this domain whatsoever. But I wanted to do it the right and the robust way.</p>\n<p><em><strong>A little background sharing of myself:</strong> I used to build high frequency trading strategies in CeFi for the past 2 years, and I used to be an AI engineer before that for another couple of years. So I‚Äôm not entirely new to programming per se. I used Python, Javascript, and C# extensively in multiple projects, but always had the temptation to adopt Rust within my newer ones. So I‚Äôve decided to study Rust this time.</em></p>\n<p>¬†</p>\n<h4 id=\"my-roadmap\" tabindex=\"-1\">My Roadmap</h4>\n<p>I embarked on this journey just 3 days ago (June 7th, 2023). <em>(So yes, my resolution might not stick too long)</em> The first 3 days involved planning ahead by understanding what I am trying to accomplish here.</p>\n<p>The MEV space was quite secretive so I couldn‚Äôt find a good reference for a starting point. But digging around kind of paid off and I noticed that there were pretty huge communities either trying to fix the MEV issue, or profit from it. They were both extremely helpful to begin the journey.</p>\n<p>A couple of reference points:</p>\n<ul>\n<li><a href=\"https://www.flashbots.net/\">Flashbots</a></li>\n<li><a href=\"https://calblockchain.mirror.xyz/c56CHOu-Wow_50qPp2Wlg0rhUvdz1HLbGSUWlB_KX9o\">The 0 to 1 Guide for MEV</a></li>\n</ul>\n<p>I also noticed that there were many scams out there related to MEVs. So I had to filter out my sources with extra care.</p>\n<hr>\n<p>¬†</p>\n<p>I intend to study all of the following:</p>\n<p><strong>1. Rust</strong><br>\n<strong>2. Solidity/Yul</strong><br>\n<strong>3. Uniswap</strong><br>\n<strong>4. Flashloans</strong><br>\n<strong>5. Gas optimization</strong><br>\n<strong>6. Flashbots</strong></p>\n<p>I‚Äôve also seen on Twitter that studying Geth is probably the best way to get started with MEV. Though for me, that‚Äôs a pretty big hurdle. So I‚Äôll see what I can achieve with the minimum amount of knowledge necessary and build up from there if I feel like more is needed.</p>\n<p><a href=\"https://twitter.com/0xEzon/status/1667212919132790784?ref_src=twsrc%5Etfw\">Go read Twitter thread by 0xEzon üëâ</a></p>\n<p>With this knowledge, I plan on building the 3 types of MEV bots that people are most familiar with:</p>\n<p><strong>1. Bot #1: Frontrunning bot</strong><br>\n<strong>2. Bot #2: Sandwiching bot</strong><br>\n<strong>3. Bot #3: Uniswap JIT provisioning bot</strong></p>\n<p>and share the results to this community.</p>\n<p>I‚Äôll try and see how difficult the task is for a layman to get started with, also documenting the sources that I‚Äôve referred to as I move on forward. And by doing this, I feel like I can make my resolution stick this time, and help others trying to get involved with MEVs by giving them an idea of how difficult the task is, and how long it will take for them to get started.</p>\n<p>Anyone else with me on this journey? Good luck everyone!</p>\n",
      "date_published": "2023-06-10T00:00:00Z"
    },{
      "id": "https://solidquant.github.io/blog/post/why-i&amp;#39;m-starting-this-blog/",
      "url": "https://solidquant.github.io/blog/post/why-i&amp;#39;m-starting-this-blog/",
      "title": "Why I&#39;m starting this blog",
      "content_html": "<p>¬†</p>\n<h4 id=\"hello-there\" tabindex=\"-1\">Hello there</h4>\n<p>Hello, everyone! This is my very first blog post, and I‚Äôm actually pretty excited. I‚Äôve been willing to start a blog for quite some time now but failed to do so for various reasons - the biggest reason being busy work.</p>\n<p>I have worked on numerous projects in the past couple of years, ranging from AI services to building algo trading systems and even selling spicy torched chicken with mozzarella cheese on top üçó, which tasted amazing, by the way. There were people waiting in line to get a taste of that chicken. Yum!</p>\n<p>I majored in liberal arts when I was in college, so I never really had the chance to receive proper technical training, and I always had some regrets. The last venture I jumped into did fairly well, but the same logic applied here. If you were going to start a tech company, you had to know your tech inside out. However, as an amateur, I spent the nights studying and building at the same time, which lasted for over 2 years.</p>\n<p>This experience helped me reach new heights, but I fell into a slump after those tolling days. I wasn‚Äôt sure of what I was doing. So, after I talked to my team members, I left the company and decided to take a break from everything for a while. I really needed to do some soul-searching before I could figure out what I really wanted to do.</p>\n<p>And this blog is an attempt to document the things that I am interested in and the new projects I would like to delve into. I named it Solid Quant because I knew I would want to do quant-related projects somehow. It has been my passion for a very long time, and the emerging Web3 industry really excites me.</p>\n<p>I hope to meet new people here and find our passions together. As a non-native English speaker, I found it difficult to meet new people with the same interests from my country.</p>\n<p>Thank you for reading my blog. I‚Äôll see you all in the next post! üòÄ</p>\n<p>¬†</p>\n<h4 id=\"do-we-really-need-another-quant-blog%3F\" tabindex=\"-1\">Do we really need another quant blog?</h4>\n<p><em>Answer:</em></p>\n<p>Of course, we do. All quants pursue different strategies and each and every one of them differ in ways that can help others.</p>\n<p>I am planning to build algo trading systems from the ground up, and at the same time dig into Web3 projects to extend my systems to work on the blockchain as well. Though I‚Äôm by no means an expert in this field yet, I aspire to become one in the future.</p>\n<p>Moreover, I believe that sharing my knowledge and code with others is an effective way to identify any blind spots I may have. I am eager to engage in meaningful discussions and learn how to address any gaps in my understanding.</p>\n<p>So, anyone interested in learning, or people looking to get ideas can browse through and stick around if they feel like it.</p>\n<p>It should be amazing!</p>\n",
      "date_published": "2023-06-10T00:00:00Z"
    }
  ]
}